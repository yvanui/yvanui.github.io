import{_ as a,c as i,o as l,a6 as e}from"./chunks/framework.d-Ywx6yJ.js";const t="/assets/010.Q2iH_7ke.png",r="/assets/011.BhX5QnX1.png",o="/assets/012.B1FCZaDE.png",s="/assets/013.CYujBJmG.png",T=JSON.parse('{"title":"字段域管理","description":"","frontmatter":{"title":"字段域管理"},"headers":[],"relativePath":"yvanui/03_database/03.md","filePath":"yvanui/03_database/03.md"}'),n={name:"yvanui/03_database/03.md"},p=e('<h1 id="功能概览" tabindex="-1">功能概览 <a class="header-anchor" href="#功能概览" aria-label="Permalink to &quot;功能概览&quot;">​</a></h1><p><img src="'+t+'" alt="" loading="lazy"></p><p>字段域管理是低代码平台数据库设计的核心功能之一，它旨在通过高度可配置的字段域设置，简化数据库表结构的设计与维护过程，提升开发效率与数据模型的一致性。该功能覆盖自定义字段域的创建、配置以及在实际数据库表设计中的应用，</p><h1 id="字段域配置说明" tabindex="-1">字段域配置说明 <a class="header-anchor" href="#字段域配置说明" aria-label="Permalink to &quot;字段域配置说明&quot;">​</a></h1><p><img src="'+r+'" alt="" loading="lazy"></p><p>在低代码平台的数据库设计模块中，字段域配置是定义数据表结构的核心环节，它直接影响着数据的存储方式、数据处理逻辑以及用户界面的表现形式。 以下是各项配置的详细说明，旨在帮助设计者精确控制每一个字段的特性和行为。 字段域配置主要有一下几项：</p><ol><li>字段域名称：这是字段的唯一标识符，在数据库中用于区分不同的数据列。命名应简洁明了，反映字段的实际含义，遵循数据库命名规范。</li><li>PgSQL类型：指定字段在PostgreSQL数据库中的数据类型，例如integer、varchar、timestamp等，需符合PgSQL的语法规范。</li><li>MySQL类型：指定字段在MySQL数据库中的数据类型，包括INT、VARCHAR、DATETIME等，确保与MySQL的数据类型兼容。</li><li>Oracle类型：针对Oracle数据库，选择合适的字段类型，例如NUMBER、VARCHAR2、DATE等，需与Oracle数据库的类型系统相匹配。</li><li>SqlServer类型：指定字段在Microsoft SQL Server中的数据类型，例如INT、NVARCHAR、DATETIME2等，需遵守SqlServer的数据类型规则。</li><li>Java类型：定义字段对应的Java数据类型，如Integer、String、LocalDateTime等，用于后端Java开发时的数据绑定和处理。</li><li>固定长度：仅对某些类型（如char、binary）有效，表示该字段的存储空间固定，不随实际内容变化。勾选后需设置具体的长度值。</li><li>长度：指明字段可存储的最大字符数量（对于字符类型）或最大数值范围（对于数值类型）。需根据实际需求合理设定。</li><li>小数位：仅对数值类型有效，指定数值字段的小数部分允许的最大位数。例如，货币金额可能需要2位小数。</li><li>字典：若字段值需受限于预定义的选项集，可关联一个字典。字典中包含键值对，用于在UI上呈现下拉列表或其他形式的选择控件。</li><li>固定默认值：设置该字段在没有明确赋值时的默认值，且该值不可更改。适用于有固定初始状态的场景。</li><li>默认值：当记录创建时，如果该字段未被赋予特定值，则使用预设的默认值。与固定默认值不同，这通常是可变的，如：当前时间。</li><li>UI建议：为前端界面设计提供指导，如建议使用文本框、日期选择器、下拉列表等控件类型，以及特定的样式或验证规则。</li><li>详情描述：对字段用途和填写要求的详细描述，不仅帮助设计者记录设计意图，也便于后续开发者理解字段背景，提高维护性。</li></ol><p>通过精心配置上述各项，设计者能确保数据库字段既满足业务需求，又能在应用开发中高效地被利用，同时保证数据的一致性和准确性。</p><h1 id="自定义字段域" tabindex="-1">自定义字段域 <a class="header-anchor" href="#自定义字段域" aria-label="Permalink to &quot;自定义字段域&quot;">​</a></h1><p><img src="'+o+'" alt="" loading="lazy"></p><p>自定义字段域允许开发者或管理员根据业务需求创建特定的数据类型模板，这些模板可以跨多个数据库表应用，确保数据格式、约束和行为的一致性。</p><p>操作步骤</p><ol><li>点击“添加”按钮：在字段域管理的主界面，点击“添加”按钮。</li><li>表格多出一个空行，填写字段域：“字段域名称 、PgSQL类型 、MySQL类型 、Oracle类型 、SqlServer类型 、Java类型 、固定长度 、长度 、小数位”等关键字段。确保每项配置都根据实际业务需求精准填写，以达到最佳的适用性和兼容性。</li><li>编辑完成之后保存。保存成功后，该自定义字段域会出现在可供选择的列表中，可以直接应用于任何新的或现有的数据库表设计中。</li></ol><p>通过以上步骤，您可以高效地在低代码平台上创建自定义字段域，为数据库设计提供强大的灵活性和标准化支持。</p><h1 id="使用字段域" tabindex="-1">使用字段域 <a class="header-anchor" href="#使用字段域" aria-label="Permalink to &quot;使用字段域&quot;">​</a></h1><p><img src="'+s+'" alt="" loading="lazy"></p><p>操作步骤</p><ol><li>新增或者编辑现有表页面中，选择字段的字段域列，会带出系统所有的字段域</li><li>选择字段域，选择后这个表字段的数据类型、长度、默认值、字典等会自动基于字段域填充</li><li>修改完点击“保存”按钮完成数据库表结构的修改</li></ol><p>您可以高效地利用低代码平台的字段域功能，快速构建和调整数据库表结构，同时保证数据模型的一致性和维护性。</p>',19),c=[p];function _(d,h,m,S,g,u){return l(),i("div",null,c)}const f=a(n,[["render",_]]);export{T as __pageData,f as default};
