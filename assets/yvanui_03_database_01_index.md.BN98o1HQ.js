import{_ as l,c as i,o as a,a6 as t}from"./chunks/framework.d-Ywx6yJ.js";const e="/assets/database_layout.CAraD1oj.png",o="/assets/domain_layout.p6RSx9Cf.png",b=JSON.parse('{"title":"数据库设计","description":"","frontmatter":{"title":"数据库设计"},"headers":[],"relativePath":"yvanui/03_database/01_index.md","filePath":"yvanui/03_database/01_index.md"}'),r={name:"yvanui/03_database/01_index.md"},s=t('<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>数据库设计核心服务于研发与运维团队，专注于实现数据库表结构、字段属性及字段域的高效管理。此设计不仅促进了数据架构的清晰组织，还无缝集成了QueryDSL实体类的自动生成能力，极大提升了开发效率与运维便捷性，确保了代码的可维护性和查询语句的优雅性。</p><h2 id="主页面布局" tabindex="-1">主页面布局 <a class="header-anchor" href="#主页面布局" aria-label="Permalink to &quot;主页面布局&quot;">​</a></h2><p><img src="'+e+'" alt="" loading="lazy"></p><p>为了满足低代码平台用户对高效数据库管理的需求，我们精心设计了一系列功能强大且易于操作的工具，旨在简化数据库设计流程，提升开发与运维效率。以下是核心功能的详细介绍：</p><ol><li>新建表</li></ol><ul><li>功能描述：允许用户在数据库中创建新的数据表。用户可以定义表名、选择主键、设置字段（包括字段名、数据类型、是否允许为空等属性）以及定义外键关系等。</li><li>操作指南：提供一个直观的界面，通过拖拽或者表格填写的方式快速定义表结构，支持预览表结构并确认创建。</li></ul><ol start="2"><li>定位当前打开的表</li></ol><ul><li>功能描述：帮助用户快速跳转到当前工作区中已打开的数据表，便于进行查看或编辑操作。</li><li>操作指南：在界面侧边栏或顶部导航中提供一个“当前表”按钮或下拉列表，展示已打开表的列表，点击即可跳转。</li></ul><ol start="3"><li><p>刷新数据库表 功能描述：手动更新数据库表的视图，确保显示的是数据库中的最新状态，包括新添加的表、删除的表或修改的表结构。 操作指南：提供一个刷新图标或按钮，用户点击后系统自动查询数据库并更新界面显示。</p></li><li><p>重新建元数据</p></li></ol><ul><li>功能描述：当数据库表结构发生变化时，该功能可重新生成或更新与之对应的元数据信息，确保应用中的数据模型与数据库保持一致。</li><li>操作指南：选择需要更新的表，点击“重建元数据”按钮，系统将自动检测表结构变化并更新相关元数据。</li></ul><ol start="5"><li>数据结构同步</li></ol><ul><li>功能描述：实现设计中的数据模型与实际数据库中的表结构之间的双向同步，确保设计模型和数据库实体的一致性。</li><li>操作指南：提供“同步到数据库”和“从数据库同步”两个选项，前者用于将设计变更推送到数据库，后者用于根据数据库的实际结构更新设计模型。</li></ul><ol start="6"><li>字段域管理</li></ol><ul><li>功能描述：集中管理所有表中的字段类型、约束条件、默认值等属性，支持创建自定义字段域以实现复用。</li><li>操作指南：提供一个域管理界面，用户可在此定义、编辑或删除字段域，并将其应用于具体表字段上。</li></ul><ol start="7"><li>数据迁移</li></ol><ul><li>功能描述：支持将数据从一个数据库或表迁移到另一个，包括不同数据库类型间的迁移，以及数据转换和映射。</li><li>操作指南：提供迁移向导，用户需选择源数据库和目标数据库，配置迁移规则（如字段映射），并执行迁移任务。</li></ul><ol start="8"><li>关闭所有</li></ol><ul><li>功能描述：一键关闭当前打开的所有数据库表和/或设计界面，帮助用户清理工作环境，提高系统资源使用效率。</li><li>操作指南：在界面顶部或右上角提供明显的“关闭所有”按钮，点击后确认关闭操作。</li></ul><p>通过上述功能的集成与优化，我们的低代码平台数据库设计模块旨在为用户提供一个高效、灵活且高度可视化的数据库管理解决方案，无论是在项目初期的设计阶段还是后期的运维管理，都能显著提升团队的工作效率与项目成功率。</p><h2 id="字段域功能" tabindex="-1">字段域功能 <a class="header-anchor" href="#字段域功能" aria-label="Permalink to &quot;字段域功能&quot;">​</a></h2><p><img src="'+o+'" alt="" loading="lazy"></p><h5 id="字段域配置与多数据库适配指南" tabindex="-1">字段域配置与多数据库适配指南 <a class="header-anchor" href="#字段域配置与多数据库适配指南" aria-label="Permalink to &quot;字段域配置与多数据库适配指南&quot;">​</a></h5><p>在构建多数据库兼容的低代码平台时，字段域配置扮演着至关重要的角色。它作为数据模型与数据库交互的桥梁，不仅简化了开发者的工作，还极大地提升了系统的灵活性和可移植性。通过这一机制，开发人员能够在应用层使用统一的数据类型抽象，而无需关心底层数据库的具体实现，从而有效降低了系统对特定数据库技术栈的依赖。</p><p><strong>支持的数据库平台</strong></p><p>目前，我们的低代码平台已无缝集成并支持以下主流关系型数据库：</p><ul><li>Oracle: 适用于大型企业级应用，以其强大的事务处理能力著称。</li><li>MySQL: 开源世界的首选，广泛应用于Web应用，以其高性能和易用性闻名。</li><li>PostgreSQL: 功能丰富的对象关系数据库，支持复杂的查询和数据类型，适合处理复杂数据模型。</li></ul><p><strong>字段域配置核心功能</strong></p><ul><li>数据类型映射: 系统提供了一个直观的界面，允许用户为每个字段指定其在不同数据库平台上的数据类型。例如，一个简单的“文本”字段可能在MySQL中映射为<code>VARCHAR</code>，而在Oracle中则映射为<code>NVARCHAR2</code>。这一映射机制确保了数据类型的正确存储和处理，无论底层数据库如何变化。</li><li>自定义转换逻辑: 对于更复杂的数据类型或特定业务需求，系统支持自定义数据类型转换逻辑，使得在不同数据库间迁移时数据的一致性和完整性得以保持。</li><li>默认值与约束: 在字段域配置中，还可以为每个字段设定默认值，并定义诸如非空、唯一性等约束条件，这些配置会自动转化为相应数据库的原生约束，进一步保证数据的准确性和规范性。</li><li>动态适应性: 借助字段域配置的强大灵活性，理论上可以轻松扩展对任何其他关系型数据库的支持，只需添加相应的数据类型映射规则即可。这为未来系统升级或迁移至新兴数据库技术提供了便捷途径。</li></ul><p><strong>实践建议</strong></p><ul><li>标准化优先: 在设计字段域时，尽量采用标准SQL数据类型，以提高跨数据库的兼容性。</li><li>性能考量: 在配置数据类型时，考虑各数据库平台的性能特性，合理选择以优化查询效率和存储空间。</li></ul><p>通过上述完善策略，字段域配置不仅成为低代码平台多数据库适配的关键，也为企业数字化转型提供了坚实的技术支撑，确保了系统的长期稳定性和扩展性。</p>',32),n=[s];function p(_,d,u,c,h,m){return a(),i("div",null,n)}const f=l(r,[["render",p]]);export{b as __pageData,f as default};
