import{_ as n,c as a,o as s,a6 as e}from"./chunks/framework.d-Ywx6yJ.js";const p="/assets/absapp.DszXyuKh.png",h=JSON.parse('{"title":"基于 Container 架构的多框架前端应用","description":"","frontmatter":{"title":"基于 Container 架构的多框架前端应用","date":"2022-05-25T22:17:41.000Z","tags":["前端综合"]},"headers":[],"relativePath":"doc/tech/基于container架构的前端应用.md","filePath":"doc/tech/基于container架构的前端应用.md"}'),l={name:"doc/tech/基于container架构的前端应用.md"},r=e('<h2 id="概念介绍" tabindex="-1">概念介绍 <a class="header-anchor" href="#概念介绍" aria-label="Permalink to &quot;概念介绍&quot;">​</a></h2><p>本文提供一种用于构建多框架前端项目的思路，目前还尚未完整编写代码验证其可行性。</p><p>这种思路有些类似于<em>微前端</em>，实际上对于微前端来讲的话，社区已经有了 <a href="https://single-spa.js.org/" target="_blank" rel="noreferrer">single-spa</a> 和基于其构建的 <a href="https://qiankun.umijs.org/zh/guide/tutorial" target="_blank" rel="noreferrer">qiankun</a> 等若干方案。</p><p>这些框架都很优秀，也经过了不少生产项目的验证，能够在很大程度上满足微前端的需求。</p><p>但我个人觉得，对于一个团队规模不是很大，但是又存在不同技术栈的团队来说，直接使用这类微前端框架，会有一些负担，这主要体现在：</p><ol><li>各个微前端应用虽然可以互相调用，但是调用方式有限，对于复杂的内容比如通用 UI 模块的共享比较困难。</li><li>通常情况下，基座应用不够强大，一定程度上会加剧开发的独立性，不利于代码复用和共享。</li><li>原则上，<strong>对于小团队而言，我强烈建议统一成技术栈为 React 或者 Vue，没有任何道理可以支撑同时维护两套技术栈，但是如果想尝试一些新技术栈，可以在初期采用下述方案</strong>。</li></ol><p>我提出一种 Container 架构的前端应用，它可能应用在以下几个场景中：</p><ol><li>比如你想使用新的框架开发部分模块，例如使用 SolidJS 开发部分 React 项目中的组件，甚至使用 Rust 开发部分模块，用来做项目的实验性尝试。</li><li>出于团队人员技术栈的原因，需要 React 和 Vue 混合开发。</li><li>新的项目使用了 React，而旧的项目使用了 Vue，并且需要在短时间内把旧的项目放到新的项目中去使用。</li></ol><p>Container 架构的主要目的在于：</p><ol><li>增强基座项目的重要程度，从而做到尽可能更多地服用基础建设。</li><li>不仅模块本身可以用不同的框架编写，基座本身也可以被替换成不同的环境，例如：纯页面环境、定制化的 jupyter 环境、electron 环境。</li><li>可以让我们比较方便地进行部分模块先行升级，部分模块使用更高性能的技术栈开发同时尽可能多的复用现有基架。</li></ol><p>也就是说，<em>如果我们想换个语言开发，就新加一个模块就行，如果我们想换个地方运行，就新加一种基座就行</em>。</p><p>从而实现了双向自由度。</p><p>同时，它牺牲了一些内容：</p><ol><li>模块由于对基座项目的依赖性比较大，通常难以独立部署。</li></ol><h2 id="核心架构图" tabindex="-1">核心架构图 <a class="header-anchor" href="#核心架构图" aria-label="Permalink to &quot;核心架构图&quot;">​</a></h2><p>核心围绕一套 Container Abstract API 来展开。</p><p><img src="'+p+`" alt="" loading="lazy"></p><div class="language-plantuml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plantuml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>@startuml</span></span>
<span class="line"><span></span></span>
<span class="line"><span>node WebApp</span></span>
<span class="line"><span>node JupyterApp</span></span>
<span class="line"><span>node ElectronApp</span></span>
<span class="line"><span>node BaseApp</span></span>
<span class="line"><span>artifact ContainerAbstractAPI</span></span>
<span class="line"><span>node ReactModule1</span></span>
<span class="line"><span>node ReactModule2</span></span>
<span class="line"><span>node VueModule</span></span>
<span class="line"><span>node SolidModule</span></span>
<span class="line"><span>WebApp .. BaseApp : 继承</span></span>
<span class="line"><span>JupyterApp .. BaseApp : 继承</span></span>
<span class="line"><span>ElectronApp .. BaseApp : 继承</span></span>
<span class="line"><span>BaseApp .. ContainerAbstractAPI: 提供</span></span>
<span class="line"><span>ContainerAbstractAPI .. ReactModule1 : 依赖</span></span>
<span class="line"><span>ContainerAbstractAPI .. ReactModule2 : 依赖</span></span>
<span class="line"><span>ContainerAbstractAPI .. VueModule : 依赖</span></span>
<span class="line"><span>ContainerAbstractAPI .. SolidModule : 依赖</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@enduml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>真正应用部署的时候，选取一个 App，以及几个对应的 Module，就可以组合出我们的一套需要的项目。</p><p>针对这一套架构，对于通用的部分，我们尽可能地实现在 BaseApp 里面。</p><p>BaseApp 应该是比较少量的，一个团队中甚至只有一个，它可能会用到一些组件库或者框架，这些都可以的。</p><h2 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h2><p>对于这套架构的一个示例代码实现，我会在后续文章中给出。</p>`,23),i=[r];function t(c,o,u,b,d,m){return s(),a("div",null,i)}const A=n(l,[["render",t]]);export{h as __pageData,A as default};
