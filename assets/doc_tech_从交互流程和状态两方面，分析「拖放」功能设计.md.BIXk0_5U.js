import{_ as a,c as t,o as s,a6 as p}from"./chunks/framework.d-Ywx6yJ.js";const o="/assets/Pasted%20image%2020240331234156.CCpJa4RN.png",e="/assets/Pasted%20image%2020240331234204.ZhtyLoTi.png",r="/assets/Pasted%20image%2020240331234213.CODyeFqI.png",n="/assets/Pasted%20image%2020240331234219.BkwD0GPA.png",i="/assets/Pasted%20image%2020240331234227.CMKS-cV0.png",g="/assets/Pasted%20image%2020240331234240.C1HnK1Si.png",l="/assets/Pasted%20image%2020240331234245.8H6riqmi.png",_="/assets/Pasted%20image%2020240331234255.DZgeo3LU.png",c="/assets/Pasted%20image%2020240331234301.D2mHaIcS.png",d="/assets/Pasted%20image%2020240331234307.CqgCA5Mc.png",m="/assets/Pasted%20image%2020240331234314.bbPWa0OU.png",h="/assets/Pasted%20image%2020240331234319.Bv9rvS9I.png",P="/assets/Pasted%20image%2020240331234333.DWMyCBKR.png",u="/assets/Pasted%20image%2020240331234338.BHylPuLH.png",y="/assets/Pasted%20image%2020240331234343.BOs4tmP4.png",f="/assets/Pasted%20image%2020240331234349.BflUOBfa.png",U=JSON.parse('{"title":"从交互流程和状态两方面，分析「拖放」功能设计","description":"","frontmatter":{"title":"从交互流程和状态两方面，分析「拖放」功能设计","date":"2024-03-31 23:40","author":"yvan","refs":"https://m.saikr.com/a/464181","tags":["tech/drag-drop"]},"headers":[],"relativePath":"doc/tech/从交互流程和状态两方面，分析「拖放」功能设计.md","filePath":"doc/tech/从交互流程和状态两方面，分析「拖放」功能设计.md"}'),q={name:"doc/tech/从交互流程和状态两方面，分析「拖放」功能设计.md"},b=p('<p>拖放功能指用户选中图片、列表项或卡片等元素，拖放到页面的其他位置或其他产品中，它的设计非常多样化，应用场景也很多，本篇文章就从交互设计流程和和状态两方面来分析拖放设计</p><p>大家好，这里是设计夹，今天为大家分享的是**「拖放设计」**。</p><p>**拖放(drag and drop)**指用户选中图片、列表项或卡片等元素，拖放到页面的其他位置或其他产品中。</p><p>这种交互方式在移动端表现为<strong>长按拖动</strong>，在PC端表现为<strong>单击并用鼠标拖动</strong>，最后放到目标位置上。</p><h2 id="一、拖放设计的使用场景" tabindex="-1">一、拖放设计的使用场景 <a class="header-anchor" href="#一、拖放设计的使用场景" aria-label="Permalink to &quot;一、拖放设计的使用场景&quot;">​</a></h2><p>拖放式UI/UX的设计非常多样化，并被用在多种场景中。基于<strong>设计需求</strong>的不同，每个产品可能会要求不同的拖放设计。</p><h3 id="_1-移动项目" tabindex="-1">1. 移动项目 <a class="header-anchor" href="#_1-移动项目" aria-label="Permalink to &quot;1. 移动项目&quot;">​</a></h3><p>这种拖放类型最常见也最常用，我们将桌面上或者页面中的静态项目拖放到指定的区域，进而完成操作。</p><p><img src="'+o+'" alt="" loading="lazy"></p><p>例如在一些文档处理网站中，我们可以接将电脑桌面上的文件直拖拽到网页中，完成上传文件的过程。</p><p><img src="'+e+'" alt="" loading="lazy"></p><p>又或者电脑桌面上的文件夹，被拖放到回收站中。</p><h3 id="_2-重新排序" tabindex="-1">2. 重新排序 <a class="header-anchor" href="#_2-重新排序" aria-label="Permalink to &quot;2. 重新排序&quot;">​</a></h3><p>这种类型在网站设计中比较常见，这里的拖动目标在页面中是<strong>动态显示</strong>的，并且会在释放拖动后显示项目最终的位置。</p><p><img src="'+r+'" alt="" loading="lazy"></p><p>页面中有多个卡片，可以长按拖动来调整卡片的位置，达到重新排序的目的。</p><p>在拖动页面中的列表或者卡片重新调整顺序时，这里介绍两种拖动交互方式。</p><p><img src="'+n+'" alt="" loading="lazy"></p><p><strong>第一种交互方式</strong>是在拖动某个列表时，这个列表仍然在原位置显示，只是颜色会变浅。拖动到某个位置时，会显示一个指示条，其他列表的位置保持不动。</p><p>这样做的优点是能<strong>减少列表之间的相互移动，方便开发设计</strong>。</p><p><img src="'+i+'" alt="" loading="lazy"></p><p><strong>第二种交互方式</strong>是被拖动的列表会从原来的位置挪开，拖动到某个位置时，能直接在这个位置上显示出来，同时其他列表的位置也会动态变化。</p><p>这种拖动交互的<strong>反馈更直接</strong>，也是当前用的比较多的交互方式。</p><h2 id="二、拖放功能设计流程、状态分析" tabindex="-1">二、拖放功能设计流程、状态分析 <a class="header-anchor" href="#二、拖放功能设计流程、状态分析" aria-label="Permalink to &quot;二、拖放功能设计流程、状态分析&quot;">​</a></h2><p>为了方便大家更好理解，我们将拖放的交互分为<strong>拖放前、拖放中、拖放后</strong>三个过程，整体分析前、中、后的状态以及拖放过程中会涉及到的其他场景。</p><h3 id="_1-拖放前" tabindex="-1">1. 拖放前 <a class="header-anchor" href="#_1-拖放前" aria-label="Permalink to &quot;1. 拖放前&quot;">​</a></h3><p>在拖动前，被拖动的元素处于初始化的状态。那么我们如何让元素看起来是可以拖放的呢？</p><p>除了必要的文字提示，最常用的方法是在列表或者卡片上<strong>展示代表拖放的icon</strong>，告诉用户这些元素支持拖动。</p><p><img src="'+g+'" alt="" loading="lazy"></p><p>在PC端中，当鼠标悬停在可拖动的项目上时，还可以通过<strong>改变鼠标的样式</strong>(抓手、指针等)，告诉用户项目可以拖动。</p><p><img src="'+l+'" alt="" loading="lazy"></p><p>在改变鼠标样式的基础上，为拖动icon增加一个<strong>悬浮状态</strong>，这样能更好地表达拖动的意思。</p><p><img src="'+_+'" alt="" loading="lazy"></p><p>当鼠标点击或在手机上按下要拖动的元素时，被拖动的元素往往会有一个状态的变化，比如<strong>列表增加阴影效果</strong>或者拖动图标颜色变化，表明触发了拖动。</p><p><img src="'+c+'" alt="" loading="lazy"></p><h3 id="_2-拖放中" tabindex="-1">2. 拖放中 <a class="header-anchor" href="#_2-拖放中" aria-label="Permalink to &quot;2. 拖放中&quot;">​</a></h3><p>触发拖动后，接下来就到了拖动中流程。</p><p>通过鼠标或手指移动，被拖动的元素也会跟着移动，进而将元素拖动到指定的位置上。</p><p><img src="'+d+'" alt="" loading="lazy"></p><p>如果当前的列表支持多选，可以选择多个列表项，然后一起拖动。</p><p>在多个列表共同拖动的情况下，最好能有一个<strong>显示多选数量的徽标</strong>，这样能清楚地展示出多选的数量。</p><p><img src="'+m+'" alt="" loading="lazy"></p><p>当需要把项目拖动到指定区域的场景中，随着被拖动的项目越来越靠近指定区域，该区域的<strong>视觉反馈</strong>可以越来越强，起到很好的指示作用。</p><p><img src="'+h+'" alt="" loading="lazy"></p><p>如果拖动的项目违反了规则，可以直接<strong>给出错误反馈</strong>。</p><p>例如我们想把四个列表一起拖到屏幕上的指定区域，如果不符合拖放规则，在拖动到该区域时给出错误提示，方便用户了解规则。</p><p><img src="'+P+'" alt="" loading="lazy"></p><h3 id="_3-拖放后" tabindex="-1">3. 拖放后 <a class="header-anchor" href="#_3-拖放后" aria-label="Permalink to &quot;3. 拖放后&quot;">​</a></h3><p>拖放完成后，可以直接显示一个拖放成功的提示，清晰地告知用户操作成功。</p><p><img src="'+u+'" alt="" loading="lazy"></p><p>例如把四个列表一起拖动到指定区域后，除了显示操作完成，还可以把拖放的列表数量一起显示出来，让提示更严谨。</p><p><img src="'+y+'" alt="" loading="lazy"></p><p>如果把四个列表一起拖动到指定区域后，每个列表还需要依次上传，这个时候最好能<strong>提供上传状态的提示</strong>：</p><p>上传中(进度)、已完成、上传失败等，让拖动上传的过程更加可视化。</p><p><img src="'+f+'" alt="" loading="lazy"></p><h2 id="三、最后" tabindex="-1">三、最后 <a class="header-anchor" href="#三、最后" aria-label="Permalink to &quot;三、最后&quot;">​</a></h2><p>以上分析了拖放功能的使用场景和状态，希望通过这些内容帮助大家了解**「拖放」**功能在设计中的用法，进一步提升体验！</p><p><strong>专栏作家</strong></p><p>作者：Clippp，微信公众号：Clip设计夹。每周精选设计文章，专注分享关于产品、交互、UI视觉上的设计思考。</p><p>本文原创发布于人人都是产品经理，未经作者许可，禁止转载。</p><p>题图来自 Unsplash，基于CC0协议。</p><p>储空间服务。</p>',62),z=[b];function C(k,x,B,S,D,I){return s(),t("div",null,z)}const v=a(q,[["render",C]]);export{U as __pageData,v as default};
